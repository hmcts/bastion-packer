name: Bastion Packer

schedules:
  # Run once a week
  - cron: '0 3 * * 1' # Every monday at 3am UTC
    displayName: Weekly scheduled build # friendly name given to a specific schedule
    branches:
      include:
        - master
    always: true

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - azure-pipelines.yml
      - ubuntu.pkr.hcl
      - provision-bastion.sh

pr:
  branches:
    include:
      - master

variables:
  - name: os_version
    value: '24.04'

stages:
  - stage: build
    jobs:
      - job: get_azure_image_version
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2.208.0
            displayName: Get latest azure image version
            name: get_azure_image_version
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                AZURE_IMAGE_VERSION=$(az sig image-version list --gallery-image-definition bastion-ubuntu-v2 --gallery-name hmcts --resource-group hmcts-image-gallery-rg --query "[?starts_with(name, '$(os_version).')].{name:name}" -o tsv | sort -V | tail -n1)

                if [ -z "$AZURE_IMAGE_VERSION" ]; then
                    AZURE_IMAGE_VERSION="$(os_version).0"
                else
                    IFS=. read -r major minor patch <<<"$AZURE_IMAGE_VERSION"
                    ((patch++))
                    printf -v AZURE_IMAGE_VERSION '%d.%02d.%d' "$major" "$minor" "$((patch))"
                fi

                echo $AZURE_IMAGE_VERSION
                echo "##vso[task.setvariable variable=azure_image_version;isoutput=true]$AZURE_IMAGE_VERSION"

      - job: build_image
        pool:
          vmImage: 'ubuntu-latest'
        dependsOn: get_azure_image_version
        strategy:
          matrix:
            Ubuntu:
              os: Ubuntu
              image_name: bastion-ubuntu-v2
              templatePath: ubuntu.pkr.hcl
        variables:
          azure_image_version: $[ dependencies.get_azure_image_version.outputs['get_azure_image_version.azure_image_version'] ]
        steps:
          - checkout: self
          - task: AzureCLI@2.208.0
            displayName: Delete published image from previous failure
            condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            name: delete_failed_pr_image
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az sig image-version delete --gallery-image-version $(System.PullRequest.PullRequestNumber).0.0 --gallery-image-definition $(image_name) --gallery-name hmcts --resource-group hmcts-image-gallery-rg

          - task: riezebosch.Packer.PackerTool.PackerTool@0
            displayName: 'Install Packer'
            inputs:
              version: 1.9.1

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'Validate'
            inputs:
              templatePath: $(templatePath)
              command: validate
              azureSubscription: dts-management-prod-intsvc

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'PR Build'
            name: prbuild
            condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              templatePath: $(templatePath)
              variables: |
                azure_image_version=$(System.PullRequest.PullRequestNumber).0.0
              command: build
              azureSubscription: dts-management-prod-intsvc
              options: --only=azure-arm.pr-azure-os-image

          - task: AzureCLI@2.208.0
            displayName: Cleanup resources on fail
            condition: failed()
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                resource_group_name=$(echo $(prbuild.DeploymentName) | sed 's/pkrdp//')
                az group delete --name "pkr-Resource-Group-${resource_group_name}" --yes

          - task: AzureCLI@2.208.0
            displayName: Delete published PR build image version
            condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            name: delete_pr_azure_image_version
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az sig image-version delete --gallery-image-version $(System.PullRequest.PullRequestNumber).0.0 --gallery-image-definition $(image_name) --gallery-name hmcts --resource-group hmcts-image-gallery-rg

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'Master Build'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              templatePath: $(templatePath)
              variables: |
                azure_image_version=$(azure_image_version)
              command: build
              azureSubscription: dts-management-prod-intsvc
              options: --only=azure-arm.azure-os-image

  - stage: release
    jobs:
      - job: publish_release
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          azure_image_version: $[ stageDependencies.build.get_azure_image_version.outputs['get_azure_image_version.azure_image_version'] ]
        steps:
          - checkout: self
          - task: GitHubRelease@1
            displayName: Create GitHubRelease
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              gitHubConnection: 'GitHub Management - Full Repo Access'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: '$(azure_image_version)'
              title: '$(azure_image_version)'
              releaseNotesSource: inline
              releaseNotesInline: 'Regular maintenance updates for non-pinned packages'
              addChangeLog: true
              compareWith: 'lastFullRelease'
# jobs:
#   - job: Linux
#     pool:
#       vmImage: 'ubuntu-latest'
#     strategy:
#       matrix:
#         Ubuntu:
#           os: Ubuntu
#           templatePath: ubuntu.pkr.hcl
#     steps:
#       - checkout: self
#       - task: AzureCLI@2.208.0
#         displayName: Get latest azure image version
#         name: get_azure_image_version
#         inputs:
#           azureSubscription: dts-management-prod-intsvc
#           scriptType: bash
#           scriptLocation: inlineScript
#           inlineScript: |
#             AZURE_IMAGE_VERSION=$(az sig image-version list --gallery-image-definition bastion-ubuntu --gallery-name hmcts --resource-group hmcts-image-gallery-rg --query '[].{name:name}' -o tsv | sort -V | tail -n1)
#             IFS=. read -r major minor patch <<<"$AZURE_IMAGE_VERSION"
#             ((patch++))
#             printf -v AZURE_IMAGE_VERSION '%d.%d.%d' "$major" "$minor" "$((patch))"
#             echo $AZURE_IMAGE_VERSION
#             echo "##vso[task.setvariable variable=azure_image_version;isoutput=true]$AZURE_IMAGE_VERSION"

#       - task: riezebosch.Packer.PackerTool.PackerTool@0
#         displayName: 'Install Packer'
#         inputs:
#           version: 1.9.1

#       - task: riezebosch.Packer.Packer.Packer@0
#         displayName: 'Validate'
#         inputs:
#           command: validate
#           azureSubscription: dts-management-prod-intsvc

#       - task: riezebosch.Packer.Packer.Packer@0
#         displayName: 'Build'
#         condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
#         inputs:
#           templatePath: $(templatePath)
#           command: build
#           azureSubscription: dts-management-prod-intsvc
#           variables: |
#             azure_image_version=$(get_azure_image_version.azure_image_version)

#       - task: GitHubRelease@1
#         displayName: Create GitHubRelease
#         condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
#         inputs:
#           gitHubConnection: 'GitHub Management - Full Repo Access'
#           repositoryName: '$(Build.Repository.Name)'
#           action: 'create'
#           target: '$(Build.SourceVersion)'
#           tagSource: 'userSpecifiedTag'
#           tag: '$(get_azure_image_version.azure_image_version)'
#           title: '$(get_azure_image_version.azure_image_version)'
#           releaseNotesSource: inline
#           releaseNotesInline: 'Regular maintenance updates for non-pinned packages'
#           addChangeLog: true
#           compareWith: 'lastFullRelease'
